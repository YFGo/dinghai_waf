// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/wafTop/v1/strategy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Strategy_CreateStrategy_FullMethodName = "/api.wafTop.v1.Strategy/CreateStrategy"
	Strategy_UpdateStrategy_FullMethodName = "/api.wafTop.v1.Strategy/UpdateStrategy"
	Strategy_DeleteStrategy_FullMethodName = "/api.wafTop.v1.Strategy/DeleteStrategy"
	Strategy_GetStrategy_FullMethodName    = "/api.wafTop.v1.Strategy/GetStrategy"
	Strategy_ListStrategy_FullMethodName   = "/api.wafTop.v1.Strategy/ListStrategy"
)

// StrategyClient is the client API for Strategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyClient interface {
	CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...grpc.CallOption) (*CreateStrategyReply, error)
	UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStrategyReply, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*DeleteStrategyReply, error)
	GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*GetStrategyReply, error)
	ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyReply, error)
}

type strategyClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyClient(cc grpc.ClientConnInterface) StrategyClient {
	return &strategyClient{cc}
}

func (c *strategyClient) CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...grpc.CallOption) (*CreateStrategyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_CreateStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStrategyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_UpdateStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*DeleteStrategyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_DeleteStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*GetStrategyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_GetStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStrategyReply)
	err := c.cc.Invoke(ctx, Strategy_ListStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyServer is the server API for Strategy service.
// All implementations must embed UnimplementedStrategyServer
// for forward compatibility.
type StrategyServer interface {
	CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error)
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error)
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error)
	GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error)
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error)
	mustEmbedUnimplementedStrategyServer()
}

// UnimplementedStrategyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStrategyServer struct{}

func (UnimplementedStrategyServer) CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategy not implemented")
}
func (UnimplementedStrategyServer) UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategy not implemented")
}
func (UnimplementedStrategyServer) DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategy not implemented")
}
func (UnimplementedStrategyServer) GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategy not implemented")
}
func (UnimplementedStrategyServer) ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategy not implemented")
}
func (UnimplementedStrategyServer) mustEmbedUnimplementedStrategyServer() {}
func (UnimplementedStrategyServer) testEmbeddedByValue()                  {}

// UnsafeStrategyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyServer will
// result in compilation errors.
type UnsafeStrategyServer interface {
	mustEmbedUnimplementedStrategyServer()
}

func RegisterStrategyServer(s grpc.ServiceRegistrar, srv StrategyServer) {
	// If the following call pancis, it indicates UnimplementedStrategyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Strategy_ServiceDesc, srv)
}

func _Strategy_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_CreateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).CreateStrategy(ctx, req.(*CreateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_UpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).UpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_UpdateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_DeleteStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_GetStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).GetStrategy(ctx, req.(*GetStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_ListStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).ListStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strategy_ListStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).ListStrategy(ctx, req.(*ListStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Strategy_ServiceDesc is the grpc.ServiceDesc for Strategy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strategy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wafTop.v1.Strategy",
	HandlerType: (*StrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStrategy",
			Handler:    _Strategy_CreateStrategy_Handler,
		},
		{
			MethodName: "UpdateStrategy",
			Handler:    _Strategy_UpdateStrategy_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _Strategy_DeleteStrategy_Handler,
		},
		{
			MethodName: "GetStrategy",
			Handler:    _Strategy_GetStrategy_Handler,
		},
		{
			MethodName: "ListStrategy",
			Handler:    _Strategy_ListStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wafTop/v1/strategy.proto",
}
