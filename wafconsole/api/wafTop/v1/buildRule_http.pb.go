// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.2
// source: api/wafTop/v1/buildRule.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBuildRuleGetBuildRule = "/api.wafTop.v1.BuildRule/GetBuildRule"
const OperationBuildRuleListBuildRule = "/api.wafTop.v1.BuildRule/ListBuildRule"

type BuildRuleHTTPServer interface {
	GetBuildRule(context.Context, *GetBuildRuleRequest) (*GetBuildRuleReply, error)
	ListBuildRule(context.Context, *ListBuildRuleRequest) (*ListBuildRuleReply, error)
}

func RegisterBuildRuleHTTPServer(s *http.Server, srv BuildRuleHTTPServer) {
	r := s.Route("/")
	r.GET("/app/wafTop/v1/buildinRule/{id}", _BuildRule_GetBuildRule0_HTTP_Handler(srv))
	r.GET("/app/wafTop/v1/buildinRules", _BuildRule_ListBuildRule0_HTTP_Handler(srv))
}

func _BuildRule_GetBuildRule0_HTTP_Handler(srv BuildRuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBuildRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBuildRuleGetBuildRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBuildRule(ctx, req.(*GetBuildRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBuildRuleReply)
		return ctx.Result(200, reply)
	}
}

func _BuildRule_ListBuildRule0_HTTP_Handler(srv BuildRuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBuildRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBuildRuleListBuildRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBuildRule(ctx, req.(*ListBuildRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBuildRuleReply)
		return ctx.Result(200, reply)
	}
}

type BuildRuleHTTPClient interface {
	GetBuildRule(ctx context.Context, req *GetBuildRuleRequest, opts ...http.CallOption) (rsp *GetBuildRuleReply, err error)
	ListBuildRule(ctx context.Context, req *ListBuildRuleRequest, opts ...http.CallOption) (rsp *ListBuildRuleReply, err error)
}

type BuildRuleHTTPClientImpl struct {
	cc *http.Client
}

func NewBuildRuleHTTPClient(client *http.Client) BuildRuleHTTPClient {
	return &BuildRuleHTTPClientImpl{client}
}

func (c *BuildRuleHTTPClientImpl) GetBuildRule(ctx context.Context, in *GetBuildRuleRequest, opts ...http.CallOption) (*GetBuildRuleReply, error) {
	var out GetBuildRuleReply
	pattern := "/app/wafTop/v1/buildinRule/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBuildRuleGetBuildRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BuildRuleHTTPClientImpl) ListBuildRule(ctx context.Context, in *ListBuildRuleRequest, opts ...http.CallOption) (*ListBuildRuleReply, error) {
	var out ListBuildRuleReply
	pattern := "/app/wafTop/v1/buildinRules"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBuildRuleListBuildRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
