// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/wafTop/v1/ruleGroup.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuleGroup_CreateRuleGroup_FullMethodName = "/api.wafTop.v1.RuleGroup/CreateRuleGroup"
	RuleGroup_UpdateRuleGroup_FullMethodName = "/api.wafTop.v1.RuleGroup/UpdateRuleGroup"
	RuleGroup_DeleteRuleGroup_FullMethodName = "/api.wafTop.v1.RuleGroup/DeleteRuleGroup"
	RuleGroup_GetRuleGroup_FullMethodName    = "/api.wafTop.v1.RuleGroup/GetRuleGroup"
	RuleGroup_ListRuleGroup_FullMethodName   = "/api.wafTop.v1.RuleGroup/ListRuleGroup"
)

// RuleGroupClient is the client API for RuleGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleGroupClient interface {
	CreateRuleGroup(ctx context.Context, in *CreateRuleGroupRequest, opts ...grpc.CallOption) (*CreateRuleGroupReply, error)
	UpdateRuleGroup(ctx context.Context, in *UpdateRuleGroupRequest, opts ...grpc.CallOption) (*UpdateRuleGroupReply, error)
	DeleteRuleGroup(ctx context.Context, in *DeleteRuleGroupRequest, opts ...grpc.CallOption) (*DeleteRuleGroupReply, error)
	GetRuleGroup(ctx context.Context, in *GetRuleGroupRequest, opts ...grpc.CallOption) (*GetRuleGroupReply, error)
	ListRuleGroup(ctx context.Context, in *ListRuleGroupRequest, opts ...grpc.CallOption) (*ListRuleGroupReply, error)
}

type ruleGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleGroupClient(cc grpc.ClientConnInterface) RuleGroupClient {
	return &ruleGroupClient{cc}
}

func (c *ruleGroupClient) CreateRuleGroup(ctx context.Context, in *CreateRuleGroupRequest, opts ...grpc.CallOption) (*CreateRuleGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuleGroupReply)
	err := c.cc.Invoke(ctx, RuleGroup_CreateRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupClient) UpdateRuleGroup(ctx context.Context, in *UpdateRuleGroupRequest, opts ...grpc.CallOption) (*UpdateRuleGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRuleGroupReply)
	err := c.cc.Invoke(ctx, RuleGroup_UpdateRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupClient) DeleteRuleGroup(ctx context.Context, in *DeleteRuleGroupRequest, opts ...grpc.CallOption) (*DeleteRuleGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRuleGroupReply)
	err := c.cc.Invoke(ctx, RuleGroup_DeleteRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupClient) GetRuleGroup(ctx context.Context, in *GetRuleGroupRequest, opts ...grpc.CallOption) (*GetRuleGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuleGroupReply)
	err := c.cc.Invoke(ctx, RuleGroup_GetRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupClient) ListRuleGroup(ctx context.Context, in *ListRuleGroupRequest, opts ...grpc.CallOption) (*ListRuleGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRuleGroupReply)
	err := c.cc.Invoke(ctx, RuleGroup_ListRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleGroupServer is the server API for RuleGroup service.
// All implementations must embed UnimplementedRuleGroupServer
// for forward compatibility.
type RuleGroupServer interface {
	CreateRuleGroup(context.Context, *CreateRuleGroupRequest) (*CreateRuleGroupReply, error)
	UpdateRuleGroup(context.Context, *UpdateRuleGroupRequest) (*UpdateRuleGroupReply, error)
	DeleteRuleGroup(context.Context, *DeleteRuleGroupRequest) (*DeleteRuleGroupReply, error)
	GetRuleGroup(context.Context, *GetRuleGroupRequest) (*GetRuleGroupReply, error)
	ListRuleGroup(context.Context, *ListRuleGroupRequest) (*ListRuleGroupReply, error)
	mustEmbedUnimplementedRuleGroupServer()
}

// UnimplementedRuleGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleGroupServer struct{}

func (UnimplementedRuleGroupServer) CreateRuleGroup(context.Context, *CreateRuleGroupRequest) (*CreateRuleGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleGroup not implemented")
}
func (UnimplementedRuleGroupServer) UpdateRuleGroup(context.Context, *UpdateRuleGroupRequest) (*UpdateRuleGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleGroup not implemented")
}
func (UnimplementedRuleGroupServer) DeleteRuleGroup(context.Context, *DeleteRuleGroupRequest) (*DeleteRuleGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleGroup not implemented")
}
func (UnimplementedRuleGroupServer) GetRuleGroup(context.Context, *GetRuleGroupRequest) (*GetRuleGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleGroup not implemented")
}
func (UnimplementedRuleGroupServer) ListRuleGroup(context.Context, *ListRuleGroupRequest) (*ListRuleGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleGroup not implemented")
}
func (UnimplementedRuleGroupServer) mustEmbedUnimplementedRuleGroupServer() {}
func (UnimplementedRuleGroupServer) testEmbeddedByValue()                   {}

// UnsafeRuleGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleGroupServer will
// result in compilation errors.
type UnsafeRuleGroupServer interface {
	mustEmbedUnimplementedRuleGroupServer()
}

func RegisterRuleGroupServer(s grpc.ServiceRegistrar, srv RuleGroupServer) {
	// If the following call pancis, it indicates UnimplementedRuleGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuleGroup_ServiceDesc, srv)
}

func _RuleGroup_CreateRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupServer).CreateRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroup_CreateRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupServer).CreateRuleGroup(ctx, req.(*CreateRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroup_UpdateRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupServer).UpdateRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroup_UpdateRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupServer).UpdateRuleGroup(ctx, req.(*UpdateRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroup_DeleteRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupServer).DeleteRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroup_DeleteRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupServer).DeleteRuleGroup(ctx, req.(*DeleteRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroup_GetRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupServer).GetRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroup_GetRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupServer).GetRuleGroup(ctx, req.(*GetRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroup_ListRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupServer).ListRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroup_ListRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupServer).ListRuleGroup(ctx, req.(*ListRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleGroup_ServiceDesc is the grpc.ServiceDesc for RuleGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wafTop.v1.RuleGroup",
	HandlerType: (*RuleGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRuleGroup",
			Handler:    _RuleGroup_CreateRuleGroup_Handler,
		},
		{
			MethodName: "UpdateRuleGroup",
			Handler:    _RuleGroup_UpdateRuleGroup_Handler,
		},
		{
			MethodName: "DeleteRuleGroup",
			Handler:    _RuleGroup_DeleteRuleGroup_Handler,
		},
		{
			MethodName: "GetRuleGroup",
			Handler:    _RuleGroup_GetRuleGroup_Handler,
		},
		{
			MethodName: "ListRuleGroup",
			Handler:    _RuleGroup_ListRuleGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wafTop/v1/ruleGroup.proto",
}
