// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.2
// source: api/wafTop/v1/userRule.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserRuleCreateUserRule = "/api.wafTop.v1.UserRule/CreateUserRule"
const OperationUserRuleDeleteUserRule = "/api.wafTop.v1.UserRule/DeleteUserRule"
const OperationUserRuleUpdateUserRule = "/api.wafTop.v1.UserRule/UpdateUserRule"

type UserRuleHTTPServer interface {
	CreateUserRule(context.Context, *CreateUserRuleRequest) (*CreateUserRuleReply, error)
	DeleteUserRule(context.Context, *DeleteUserRuleRequest) (*DeleteUserRuleReply, error)
	UpdateUserRule(context.Context, *UpdateUserRuleRequest) (*UpdateUserRuleReply, error)
}

func RegisterUserRuleHTTPServer(s *http.Server, srv UserRuleHTTPServer) {
	r := s.Route("/")
	r.POST("/app/wafTop/v1/userRule", _UserRule_CreateUserRule0_HTTP_Handler(srv))
	r.PATCH("/app/wafTop/v1/userRule", _UserRule_UpdateUserRule0_HTTP_Handler(srv))
	r.DELETE("/app/wafTop/v1/userRule", _UserRule_DeleteUserRule0_HTTP_Handler(srv))
}

func _UserRule_CreateUserRule0_HTTP_Handler(srv UserRuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRuleCreateUserRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserRule(ctx, req.(*CreateUserRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserRuleReply)
		return ctx.Result(200, reply)
	}
}

func _UserRule_UpdateUserRule0_HTTP_Handler(srv UserRuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRuleUpdateUserRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserRule(ctx, req.(*UpdateUserRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserRuleReply)
		return ctx.Result(200, reply)
	}
}

func _UserRule_DeleteUserRule0_HTTP_Handler(srv UserRuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRuleDeleteUserRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserRule(ctx, req.(*DeleteUserRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserRuleReply)
		return ctx.Result(200, reply)
	}
}

type UserRuleHTTPClient interface {
	CreateUserRule(ctx context.Context, req *CreateUserRuleRequest, opts ...http.CallOption) (rsp *CreateUserRuleReply, err error)
	DeleteUserRule(ctx context.Context, req *DeleteUserRuleRequest, opts ...http.CallOption) (rsp *DeleteUserRuleReply, err error)
	UpdateUserRule(ctx context.Context, req *UpdateUserRuleRequest, opts ...http.CallOption) (rsp *UpdateUserRuleReply, err error)
}

type UserRuleHTTPClientImpl struct {
	cc *http.Client
}

func NewUserRuleHTTPClient(client *http.Client) UserRuleHTTPClient {
	return &UserRuleHTTPClientImpl{client}
}

func (c *UserRuleHTTPClientImpl) CreateUserRule(ctx context.Context, in *CreateUserRuleRequest, opts ...http.CallOption) (*CreateUserRuleReply, error) {
	var out CreateUserRuleReply
	pattern := "/app/wafTop/v1/userRule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRuleCreateUserRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRuleHTTPClientImpl) DeleteUserRule(ctx context.Context, in *DeleteUserRuleRequest, opts ...http.CallOption) (*DeleteUserRuleReply, error) {
	var out DeleteUserRuleReply
	pattern := "/app/wafTop/v1/userRule"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserRuleDeleteUserRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRuleHTTPClientImpl) UpdateUserRule(ctx context.Context, in *UpdateUserRuleRequest, opts ...http.CallOption) (*UpdateUserRuleReply, error) {
	var out UpdateUserRuleReply
	pattern := "/app/wafTop/v1/userRule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRuleUpdateUserRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
