// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/wafTop/v1/userRule.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserRule_CreateUserRule_FullMethodName = "/api.wafTop.v1.UserRule/CreateUserRule"
	UserRule_UpdateUserRule_FullMethodName = "/api.wafTop.v1.UserRule/UpdateUserRule"
	UserRule_DeleteUserRule_FullMethodName = "/api.wafTop.v1.UserRule/DeleteUserRule"
)

// UserRuleClient is the client API for UserRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRuleClient interface {
	CreateUserRule(ctx context.Context, in *CreateUserRuleRequest, opts ...grpc.CallOption) (*CreateUserRuleReply, error)
	UpdateUserRule(ctx context.Context, in *UpdateUserRuleRequest, opts ...grpc.CallOption) (*UpdateUserRuleReply, error)
	DeleteUserRule(ctx context.Context, in *DeleteUserRuleRequest, opts ...grpc.CallOption) (*DeleteUserRuleReply, error)
}

type userRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRuleClient(cc grpc.ClientConnInterface) UserRuleClient {
	return &userRuleClient{cc}
}

func (c *userRuleClient) CreateUserRule(ctx context.Context, in *CreateUserRuleRequest, opts ...grpc.CallOption) (*CreateUserRuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserRuleReply)
	err := c.cc.Invoke(ctx, UserRule_CreateUserRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRuleClient) UpdateUserRule(ctx context.Context, in *UpdateUserRuleRequest, opts ...grpc.CallOption) (*UpdateUserRuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRuleReply)
	err := c.cc.Invoke(ctx, UserRule_UpdateUserRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRuleClient) DeleteUserRule(ctx context.Context, in *DeleteUserRuleRequest, opts ...grpc.CallOption) (*DeleteUserRuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserRuleReply)
	err := c.cc.Invoke(ctx, UserRule_DeleteUserRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRuleServer is the server API for UserRule service.
// All implementations must embed UnimplementedUserRuleServer
// for forward compatibility.
type UserRuleServer interface {
	CreateUserRule(context.Context, *CreateUserRuleRequest) (*CreateUserRuleReply, error)
	UpdateUserRule(context.Context, *UpdateUserRuleRequest) (*UpdateUserRuleReply, error)
	DeleteUserRule(context.Context, *DeleteUserRuleRequest) (*DeleteUserRuleReply, error)
	mustEmbedUnimplementedUserRuleServer()
}

// UnimplementedUserRuleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserRuleServer struct{}

func (UnimplementedUserRuleServer) CreateUserRule(context.Context, *CreateUserRuleRequest) (*CreateUserRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRule not implemented")
}
func (UnimplementedUserRuleServer) UpdateUserRule(context.Context, *UpdateUserRuleRequest) (*UpdateUserRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRule not implemented")
}
func (UnimplementedUserRuleServer) DeleteUserRule(context.Context, *DeleteUserRuleRequest) (*DeleteUserRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRule not implemented")
}
func (UnimplementedUserRuleServer) mustEmbedUnimplementedUserRuleServer() {}
func (UnimplementedUserRuleServer) testEmbeddedByValue()                  {}

// UnsafeUserRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRuleServer will
// result in compilation errors.
type UnsafeUserRuleServer interface {
	mustEmbedUnimplementedUserRuleServer()
}

func RegisterUserRuleServer(s grpc.ServiceRegistrar, srv UserRuleServer) {
	// If the following call pancis, it indicates UnimplementedUserRuleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserRule_ServiceDesc, srv)
}

func _UserRule_CreateUserRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRuleServer).CreateUserRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRule_CreateUserRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRuleServer).CreateUserRule(ctx, req.(*CreateUserRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRule_UpdateUserRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRuleServer).UpdateUserRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRule_UpdateUserRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRuleServer).UpdateUserRule(ctx, req.(*UpdateUserRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRule_DeleteUserRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRuleServer).DeleteUserRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRule_DeleteUserRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRuleServer).DeleteUserRule(ctx, req.(*DeleteUserRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRule_ServiceDesc is the grpc.ServiceDesc for UserRule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wafTop.v1.UserRule",
	HandlerType: (*UserRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserRule",
			Handler:    _UserRule_CreateUserRule_Handler,
		},
		{
			MethodName: "UpdateUserRule",
			Handler:    _UserRule_UpdateUserRule_Handler,
		},
		{
			MethodName: "DeleteUserRule",
			Handler:    _UserRule_DeleteUserRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wafTop/v1/userRule.proto",
}
