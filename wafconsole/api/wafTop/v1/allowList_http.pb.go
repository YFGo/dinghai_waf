// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.2
// source: api/wafTop/v1/allowList.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAllowListCreateAllowList = "/api.wafTop.v1.AllowList/CreateAllowList"
const OperationAllowListDeleteAllowList = "/api.wafTop.v1.AllowList/DeleteAllowList"
const OperationAllowListGetAllowList = "/api.wafTop.v1.AllowList/GetAllowList"
const OperationAllowListListAllowList = "/api.wafTop.v1.AllowList/ListAllowList"
const OperationAllowListUpdateAllowList = "/api.wafTop.v1.AllowList/UpdateAllowList"

type AllowListHTTPServer interface {
	CreateAllowList(context.Context, *CreateAllowListRequest) (*CreateAllowListReply, error)
	DeleteAllowList(context.Context, *DeleteAllowListRequest) (*DeleteAllowListReply, error)
	GetAllowList(context.Context, *GetAllowListRequest) (*GetAllowListReply, error)
	ListAllowList(context.Context, *ListAllowListRequest) (*ListAllowListReply, error)
	UpdateAllowList(context.Context, *UpdateAllowListRequest) (*UpdateAllowListReply, error)
}

func RegisterAllowListHTTPServer(s *http.Server, srv AllowListHTTPServer) {
	r := s.Route("/")
	r.POST("/app/wafTop/v1/allow", _AllowList_CreateAllowList0_HTTP_Handler(srv))
	r.PATCH("/app/wafTop/v1/allow", _AllowList_UpdateAllowList0_HTTP_Handler(srv))
	r.DELETE("/app/wafTop/v1/allow", _AllowList_DeleteAllowList0_HTTP_Handler(srv))
	r.GET("/app/wafTop/v1/allow/{id}", _AllowList_GetAllowList0_HTTP_Handler(srv))
	r.GET("/app/wafTop/v1/allows", _AllowList_ListAllowList0_HTTP_Handler(srv))
}

func _AllowList_CreateAllowList0_HTTP_Handler(srv AllowListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAllowListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAllowListCreateAllowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAllowList(ctx, req.(*CreateAllowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAllowListReply)
		return ctx.Result(200, reply)
	}
}

func _AllowList_UpdateAllowList0_HTTP_Handler(srv AllowListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAllowListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAllowListUpdateAllowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAllowList(ctx, req.(*UpdateAllowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAllowListReply)
		return ctx.Result(200, reply)
	}
}

func _AllowList_DeleteAllowList0_HTTP_Handler(srv AllowListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAllowListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAllowListDeleteAllowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAllowList(ctx, req.(*DeleteAllowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAllowListReply)
		return ctx.Result(200, reply)
	}
}

func _AllowList_GetAllowList0_HTTP_Handler(srv AllowListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllowListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAllowListGetAllowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllowList(ctx, req.(*GetAllowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllowListReply)
		return ctx.Result(200, reply)
	}
}

func _AllowList_ListAllowList0_HTTP_Handler(srv AllowListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAllowListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAllowListListAllowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAllowList(ctx, req.(*ListAllowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAllowListReply)
		return ctx.Result(200, reply)
	}
}

type AllowListHTTPClient interface {
	CreateAllowList(ctx context.Context, req *CreateAllowListRequest, opts ...http.CallOption) (rsp *CreateAllowListReply, err error)
	DeleteAllowList(ctx context.Context, req *DeleteAllowListRequest, opts ...http.CallOption) (rsp *DeleteAllowListReply, err error)
	GetAllowList(ctx context.Context, req *GetAllowListRequest, opts ...http.CallOption) (rsp *GetAllowListReply, err error)
	ListAllowList(ctx context.Context, req *ListAllowListRequest, opts ...http.CallOption) (rsp *ListAllowListReply, err error)
	UpdateAllowList(ctx context.Context, req *UpdateAllowListRequest, opts ...http.CallOption) (rsp *UpdateAllowListReply, err error)
}

type AllowListHTTPClientImpl struct {
	cc *http.Client
}

func NewAllowListHTTPClient(client *http.Client) AllowListHTTPClient {
	return &AllowListHTTPClientImpl{client}
}

func (c *AllowListHTTPClientImpl) CreateAllowList(ctx context.Context, in *CreateAllowListRequest, opts ...http.CallOption) (*CreateAllowListReply, error) {
	var out CreateAllowListReply
	pattern := "/app/wafTop/v1/allow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAllowListCreateAllowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AllowListHTTPClientImpl) DeleteAllowList(ctx context.Context, in *DeleteAllowListRequest, opts ...http.CallOption) (*DeleteAllowListReply, error) {
	var out DeleteAllowListReply
	pattern := "/app/wafTop/v1/allow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAllowListDeleteAllowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AllowListHTTPClientImpl) GetAllowList(ctx context.Context, in *GetAllowListRequest, opts ...http.CallOption) (*GetAllowListReply, error) {
	var out GetAllowListReply
	pattern := "/app/wafTop/v1/allow/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAllowListGetAllowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AllowListHTTPClientImpl) ListAllowList(ctx context.Context, in *ListAllowListRequest, opts ...http.CallOption) (*ListAllowListReply, error) {
	var out ListAllowListReply
	pattern := "/app/wafTop/v1/allows"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAllowListListAllowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AllowListHTTPClientImpl) UpdateAllowList(ctx context.Context, in *UpdateAllowListRequest, opts ...http.CallOption) (*UpdateAllowListReply, error) {
	var out UpdateAllowListReply
	pattern := "/app/wafTop/v1/allow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAllowListUpdateAllowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
