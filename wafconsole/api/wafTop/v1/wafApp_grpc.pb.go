// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/wafTop/v1/wafApp.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WafApp_CreateWafApp_FullMethodName = "/api.wafTop.v1.WafApp/CreateWafApp"
	WafApp_UpdateWafApp_FullMethodName = "/api.wafTop.v1.WafApp/UpdateWafApp"
	WafApp_DeleteWafApp_FullMethodName = "/api.wafTop.v1.WafApp/DeleteWafApp"
	WafApp_GetWafApp_FullMethodName    = "/api.wafTop.v1.WafApp/GetWafApp"
	WafApp_ListWafApp_FullMethodName   = "/api.wafTop.v1.WafApp/ListWafApp"
)

// WafAppClient is the client API for WafApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WafAppClient interface {
	CreateWafApp(ctx context.Context, in *ChangeServerRequest, opts ...grpc.CallOption) (*CreateWafAppReply, error)
	UpdateWafApp(ctx context.Context, in *ChangeServerRequest, opts ...grpc.CallOption) (*UpdateWafAppReply, error)
	DeleteWafApp(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	GetWafApp(ctx context.Context, in *GetWafAppRequest, opts ...grpc.CallOption) (*GetWafAppReply, error)
	ListWafApp(ctx context.Context, in *ListWafAppRequest, opts ...grpc.CallOption) (*ListWafAppReply, error)
}

type wafAppClient struct {
	cc grpc.ClientConnInterface
}

func NewWafAppClient(cc grpc.ClientConnInterface) WafAppClient {
	return &wafAppClient{cc}
}

func (c *wafAppClient) CreateWafApp(ctx context.Context, in *ChangeServerRequest, opts ...grpc.CallOption) (*CreateWafAppReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWafAppReply)
	err := c.cc.Invoke(ctx, WafApp_CreateWafApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafAppClient) UpdateWafApp(ctx context.Context, in *ChangeServerRequest, opts ...grpc.CallOption) (*UpdateWafAppReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWafAppReply)
	err := c.cc.Invoke(ctx, WafApp_UpdateWafApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafAppClient) DeleteWafApp(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, WafApp_DeleteWafApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafAppClient) GetWafApp(ctx context.Context, in *GetWafAppRequest, opts ...grpc.CallOption) (*GetWafAppReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWafAppReply)
	err := c.cc.Invoke(ctx, WafApp_GetWafApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafAppClient) ListWafApp(ctx context.Context, in *ListWafAppRequest, opts ...grpc.CallOption) (*ListWafAppReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWafAppReply)
	err := c.cc.Invoke(ctx, WafApp_ListWafApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WafAppServer is the server API for WafApp service.
// All implementations must embed UnimplementedWafAppServer
// for forward compatibility.
type WafAppServer interface {
	CreateWafApp(context.Context, *ChangeServerRequest) (*CreateWafAppReply, error)
	UpdateWafApp(context.Context, *ChangeServerRequest) (*UpdateWafAppReply, error)
	DeleteWafApp(context.Context, *DeleteRequest) (*DeleteReply, error)
	GetWafApp(context.Context, *GetWafAppRequest) (*GetWafAppReply, error)
	ListWafApp(context.Context, *ListWafAppRequest) (*ListWafAppReply, error)
	mustEmbedUnimplementedWafAppServer()
}

// UnimplementedWafAppServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWafAppServer struct{}

func (UnimplementedWafAppServer) CreateWafApp(context.Context, *ChangeServerRequest) (*CreateWafAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWafApp not implemented")
}
func (UnimplementedWafAppServer) UpdateWafApp(context.Context, *ChangeServerRequest) (*UpdateWafAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWafApp not implemented")
}
func (UnimplementedWafAppServer) DeleteWafApp(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWafApp not implemented")
}
func (UnimplementedWafAppServer) GetWafApp(context.Context, *GetWafAppRequest) (*GetWafAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWafApp not implemented")
}
func (UnimplementedWafAppServer) ListWafApp(context.Context, *ListWafAppRequest) (*ListWafAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWafApp not implemented")
}
func (UnimplementedWafAppServer) mustEmbedUnimplementedWafAppServer() {}
func (UnimplementedWafAppServer) testEmbeddedByValue()                {}

// UnsafeWafAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WafAppServer will
// result in compilation errors.
type UnsafeWafAppServer interface {
	mustEmbedUnimplementedWafAppServer()
}

func RegisterWafAppServer(s grpc.ServiceRegistrar, srv WafAppServer) {
	// If the following call pancis, it indicates UnimplementedWafAppServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WafApp_ServiceDesc, srv)
}

func _WafApp_CreateWafApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafAppServer).CreateWafApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafApp_CreateWafApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafAppServer).CreateWafApp(ctx, req.(*ChangeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafApp_UpdateWafApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafAppServer).UpdateWafApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafApp_UpdateWafApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafAppServer).UpdateWafApp(ctx, req.(*ChangeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafApp_DeleteWafApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafAppServer).DeleteWafApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafApp_DeleteWafApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafAppServer).DeleteWafApp(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafApp_GetWafApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWafAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafAppServer).GetWafApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafApp_GetWafApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafAppServer).GetWafApp(ctx, req.(*GetWafAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafApp_ListWafApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWafAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafAppServer).ListWafApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafApp_ListWafApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafAppServer).ListWafApp(ctx, req.(*ListWafAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WafApp_ServiceDesc is the grpc.ServiceDesc for WafApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WafApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wafTop.v1.WafApp",
	HandlerType: (*WafAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWafApp",
			Handler:    _WafApp_CreateWafApp_Handler,
		},
		{
			MethodName: "UpdateWafApp",
			Handler:    _WafApp_UpdateWafApp_Handler,
		},
		{
			MethodName: "DeleteWafApp",
			Handler:    _WafApp_DeleteWafApp_Handler,
		},
		{
			MethodName: "GetWafApp",
			Handler:    _WafApp_GetWafApp_Handler,
		},
		{
			MethodName: "ListWafApp",
			Handler:    _WafApp_ListWafApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wafTop/v1/wafApp.proto",
}
