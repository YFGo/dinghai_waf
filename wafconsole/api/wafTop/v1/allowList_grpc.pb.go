// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/wafTop/v1/allowList.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AllowList_CreateAllowList_FullMethodName = "/api.wafTop.v1.AllowList/CreateAllowList"
	AllowList_UpdateAllowList_FullMethodName = "/api.wafTop.v1.AllowList/UpdateAllowList"
	AllowList_DeleteAllowList_FullMethodName = "/api.wafTop.v1.AllowList/DeleteAllowList"
	AllowList_GetAllowList_FullMethodName    = "/api.wafTop.v1.AllowList/GetAllowList"
	AllowList_ListAllowList_FullMethodName   = "/api.wafTop.v1.AllowList/ListAllowList"
)

// AllowListClient is the client API for AllowList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllowListClient interface {
	CreateAllowList(ctx context.Context, in *CreateAllowListRequest, opts ...grpc.CallOption) (*CreateAllowListReply, error)
	UpdateAllowList(ctx context.Context, in *UpdateAllowListRequest, opts ...grpc.CallOption) (*UpdateAllowListReply, error)
	DeleteAllowList(ctx context.Context, in *DeleteAllowListRequest, opts ...grpc.CallOption) (*DeleteAllowListReply, error)
	GetAllowList(ctx context.Context, in *GetAllowListRequest, opts ...grpc.CallOption) (*GetAllowListReply, error)
	ListAllowList(ctx context.Context, in *ListAllowListRequest, opts ...grpc.CallOption) (*ListAllowListReply, error)
}

type allowListClient struct {
	cc grpc.ClientConnInterface
}

func NewAllowListClient(cc grpc.ClientConnInterface) AllowListClient {
	return &allowListClient{cc}
}

func (c *allowListClient) CreateAllowList(ctx context.Context, in *CreateAllowListRequest, opts ...grpc.CallOption) (*CreateAllowListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAllowListReply)
	err := c.cc.Invoke(ctx, AllowList_CreateAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowListClient) UpdateAllowList(ctx context.Context, in *UpdateAllowListRequest, opts ...grpc.CallOption) (*UpdateAllowListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAllowListReply)
	err := c.cc.Invoke(ctx, AllowList_UpdateAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowListClient) DeleteAllowList(ctx context.Context, in *DeleteAllowListRequest, opts ...grpc.CallOption) (*DeleteAllowListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAllowListReply)
	err := c.cc.Invoke(ctx, AllowList_DeleteAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowListClient) GetAllowList(ctx context.Context, in *GetAllowListRequest, opts ...grpc.CallOption) (*GetAllowListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllowListReply)
	err := c.cc.Invoke(ctx, AllowList_GetAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowListClient) ListAllowList(ctx context.Context, in *ListAllowListRequest, opts ...grpc.CallOption) (*ListAllowListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllowListReply)
	err := c.cc.Invoke(ctx, AllowList_ListAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllowListServer is the server API for AllowList service.
// All implementations must embed UnimplementedAllowListServer
// for forward compatibility.
type AllowListServer interface {
	CreateAllowList(context.Context, *CreateAllowListRequest) (*CreateAllowListReply, error)
	UpdateAllowList(context.Context, *UpdateAllowListRequest) (*UpdateAllowListReply, error)
	DeleteAllowList(context.Context, *DeleteAllowListRequest) (*DeleteAllowListReply, error)
	GetAllowList(context.Context, *GetAllowListRequest) (*GetAllowListReply, error)
	ListAllowList(context.Context, *ListAllowListRequest) (*ListAllowListReply, error)
	mustEmbedUnimplementedAllowListServer()
}

// UnimplementedAllowListServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAllowListServer struct{}

func (UnimplementedAllowListServer) CreateAllowList(context.Context, *CreateAllowListRequest) (*CreateAllowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllowList not implemented")
}
func (UnimplementedAllowListServer) UpdateAllowList(context.Context, *UpdateAllowListRequest) (*UpdateAllowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllowList not implemented")
}
func (UnimplementedAllowListServer) DeleteAllowList(context.Context, *DeleteAllowListRequest) (*DeleteAllowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllowList not implemented")
}
func (UnimplementedAllowListServer) GetAllowList(context.Context, *GetAllowListRequest) (*GetAllowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowList not implemented")
}
func (UnimplementedAllowListServer) ListAllowList(context.Context, *ListAllowListRequest) (*ListAllowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllowList not implemented")
}
func (UnimplementedAllowListServer) mustEmbedUnimplementedAllowListServer() {}
func (UnimplementedAllowListServer) testEmbeddedByValue()                   {}

// UnsafeAllowListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllowListServer will
// result in compilation errors.
type UnsafeAllowListServer interface {
	mustEmbedUnimplementedAllowListServer()
}

func RegisterAllowListServer(s grpc.ServiceRegistrar, srv AllowListServer) {
	// If the following call pancis, it indicates UnimplementedAllowListServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AllowList_ServiceDesc, srv)
}

func _AllowList_CreateAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowListServer).CreateAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowList_CreateAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowListServer).CreateAllowList(ctx, req.(*CreateAllowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowList_UpdateAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowListServer).UpdateAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowList_UpdateAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowListServer).UpdateAllowList(ctx, req.(*UpdateAllowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowList_DeleteAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowListServer).DeleteAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowList_DeleteAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowListServer).DeleteAllowList(ctx, req.(*DeleteAllowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowList_GetAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowListServer).GetAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowList_GetAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowListServer).GetAllowList(ctx, req.(*GetAllowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowList_ListAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowListServer).ListAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowList_ListAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowListServer).ListAllowList(ctx, req.(*ListAllowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AllowList_ServiceDesc is the grpc.ServiceDesc for AllowList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllowList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wafTop.v1.AllowList",
	HandlerType: (*AllowListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAllowList",
			Handler:    _AllowList_CreateAllowList_Handler,
		},
		{
			MethodName: "UpdateAllowList",
			Handler:    _AllowList_UpdateAllowList_Handler,
		},
		{
			MethodName: "DeleteAllowList",
			Handler:    _AllowList_DeleteAllowList_Handler,
		},
		{
			MethodName: "GetAllowList",
			Handler:    _AllowList_GetAllowList_Handler,
		},
		{
			MethodName: "ListAllowList",
			Handler:    _AllowList_ListAllowList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wafTop/v1/allowList.proto",
}
