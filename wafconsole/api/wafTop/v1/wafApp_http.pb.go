// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.2
// source: api/wafTop/v1/wafApp.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWafAppCreateWafApp = "/api.wafTop.v1.WafApp/CreateWafApp"
const OperationWafAppUpdateWafApp = "/api.wafTop.v1.WafApp/UpdateWafApp"

type WafAppHTTPServer interface {
	CreateWafApp(context.Context, *CreateWafAppRequest) (*CreateWafAppReply, error)
	UpdateWafApp(context.Context, *UpdateWafAppRequest) (*UpdateWafAppReply, error)
}

func RegisterWafAppHTTPServer(s *http.Server, srv WafAppHTTPServer) {
	r := s.Route("/")
	r.POST("/app/wafTop/v1/wafApp", _WafApp_CreateWafApp0_HTTP_Handler(srv))
	r.PATCH("/app/wafTop/v1/wafApp", _WafApp_UpdateWafApp0_HTTP_Handler(srv))
}

func _WafApp_CreateWafApp0_HTTP_Handler(srv WafAppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWafAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafAppCreateWafApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWafApp(ctx, req.(*CreateWafAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWafAppReply)
		return ctx.Result(200, reply)
	}
}

func _WafApp_UpdateWafApp0_HTTP_Handler(srv WafAppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWafAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafAppUpdateWafApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWafApp(ctx, req.(*UpdateWafAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWafAppReply)
		return ctx.Result(200, reply)
	}
}

type WafAppHTTPClient interface {
	CreateWafApp(ctx context.Context, req *CreateWafAppRequest, opts ...http.CallOption) (rsp *CreateWafAppReply, err error)
	UpdateWafApp(ctx context.Context, req *UpdateWafAppRequest, opts ...http.CallOption) (rsp *UpdateWafAppReply, err error)
}

type WafAppHTTPClientImpl struct {
	cc *http.Client
}

func NewWafAppHTTPClient(client *http.Client) WafAppHTTPClient {
	return &WafAppHTTPClientImpl{client}
}

func (c *WafAppHTTPClientImpl) CreateWafApp(ctx context.Context, in *CreateWafAppRequest, opts ...http.CallOption) (*CreateWafAppReply, error) {
	var out CreateWafAppReply
	pattern := "/app/wafTop/v1/wafApp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWafAppCreateWafApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WafAppHTTPClientImpl) UpdateWafApp(ctx context.Context, in *UpdateWafAppRequest, opts ...http.CallOption) (*UpdateWafAppReply, error) {
	var out UpdateWafAppReply
	pattern := "/app/wafTop/v1/wafApp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWafAppUpdateWafApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
