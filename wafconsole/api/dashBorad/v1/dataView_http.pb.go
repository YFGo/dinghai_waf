// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.2
// source: api/dashBorad/v1/dataView.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDataViewGetAttackInfoByTime = "/api.dashBorad.v1.DataView/GetAttackInfoByTime"
const OperationDataViewGetAttackInfoFromDay = "/api.dashBorad.v1.DataView/GetAttackInfoFromDay"
const OperationDataViewGetAttackInfoFromServer = "/api.dashBorad.v1.DataView/GetAttackInfoFromServer"
const OperationDataViewGetAttackIpFromAddr = "/api.dashBorad.v1.DataView/GetAttackIpFromAddr"

type DataViewHTTPServer interface {
	GetAttackInfoByTime(context.Context, *GetAttackInfoByTimeRequest) (*GetAttackInfoByTimeReply, error)
	GetAttackInfoFromDay(context.Context, *GetAttackInfoFromDayRequest) (*GetAttackInfoFromDayReply, error)
	GetAttackInfoFromServer(context.Context, *GetAttackInfoFromServerRequest) (*GetAttackInfoFromServerReply, error)
	GetAttackIpFromAddr(context.Context, *GetAttackIpFromAddrRequest) (*GetAttackIpFromAddrReply, error)
}

func RegisterDataViewHTTPServer(s *http.Server, srv DataViewHTTPServer) {
	r := s.Route("/")
	r.GET("/app/dashBorad/v1/attack/dataView", _DataView_GetAttackInfoFromDay0_HTTP_Handler(srv))
	r.GET("app/dashBorad/v1/attack/dataViews", _DataView_GetAttackInfoByTime0_HTTP_Handler(srv))
	r.GET("app/dashBorad/v1/attack/servers", _DataView_GetAttackInfoFromServer0_HTTP_Handler(srv))
	r.GET("app/dashBorad/v1/attack/IpAddr", _DataView_GetAttackIpFromAddr0_HTTP_Handler(srv))
}

func _DataView_GetAttackInfoFromDay0_HTTP_Handler(srv DataViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttackInfoFromDayRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDataViewGetAttackInfoFromDay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttackInfoFromDay(ctx, req.(*GetAttackInfoFromDayRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAttackInfoFromDayReply)
		return ctx.Result(200, reply)
	}
}

func _DataView_GetAttackInfoByTime0_HTTP_Handler(srv DataViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttackInfoByTimeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDataViewGetAttackInfoByTime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttackInfoByTime(ctx, req.(*GetAttackInfoByTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAttackInfoByTimeReply)
		return ctx.Result(200, reply)
	}
}

func _DataView_GetAttackInfoFromServer0_HTTP_Handler(srv DataViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttackInfoFromServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDataViewGetAttackInfoFromServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttackInfoFromServer(ctx, req.(*GetAttackInfoFromServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAttackInfoFromServerReply)
		return ctx.Result(200, reply)
	}
}

func _DataView_GetAttackIpFromAddr0_HTTP_Handler(srv DataViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttackIpFromAddrRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDataViewGetAttackIpFromAddr)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttackIpFromAddr(ctx, req.(*GetAttackIpFromAddrRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAttackIpFromAddrReply)
		return ctx.Result(200, reply)
	}
}

type DataViewHTTPClient interface {
	GetAttackInfoByTime(ctx context.Context, req *GetAttackInfoByTimeRequest, opts ...http.CallOption) (rsp *GetAttackInfoByTimeReply, err error)
	GetAttackInfoFromDay(ctx context.Context, req *GetAttackInfoFromDayRequest, opts ...http.CallOption) (rsp *GetAttackInfoFromDayReply, err error)
	GetAttackInfoFromServer(ctx context.Context, req *GetAttackInfoFromServerRequest, opts ...http.CallOption) (rsp *GetAttackInfoFromServerReply, err error)
	GetAttackIpFromAddr(ctx context.Context, req *GetAttackIpFromAddrRequest, opts ...http.CallOption) (rsp *GetAttackIpFromAddrReply, err error)
}

type DataViewHTTPClientImpl struct {
	cc *http.Client
}

func NewDataViewHTTPClient(client *http.Client) DataViewHTTPClient {
	return &DataViewHTTPClientImpl{client}
}

func (c *DataViewHTTPClientImpl) GetAttackInfoByTime(ctx context.Context, in *GetAttackInfoByTimeRequest, opts ...http.CallOption) (*GetAttackInfoByTimeReply, error) {
	var out GetAttackInfoByTimeReply
	pattern := "app/dashBorad/v1/attack/dataViews"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDataViewGetAttackInfoByTime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DataViewHTTPClientImpl) GetAttackInfoFromDay(ctx context.Context, in *GetAttackInfoFromDayRequest, opts ...http.CallOption) (*GetAttackInfoFromDayReply, error) {
	var out GetAttackInfoFromDayReply
	pattern := "/app/dashBorad/v1/attack/dataView"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDataViewGetAttackInfoFromDay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DataViewHTTPClientImpl) GetAttackInfoFromServer(ctx context.Context, in *GetAttackInfoFromServerRequest, opts ...http.CallOption) (*GetAttackInfoFromServerReply, error) {
	var out GetAttackInfoFromServerReply
	pattern := "app/dashBorad/v1/attack/servers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDataViewGetAttackInfoFromServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DataViewHTTPClientImpl) GetAttackIpFromAddr(ctx context.Context, in *GetAttackIpFromAddrRequest, opts ...http.CallOption) (*GetAttackIpFromAddrReply, error) {
	var out GetAttackIpFromAddrReply
	pattern := "app/dashBorad/v1/attack/IpAddr"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDataViewGetAttackIpFromAddr))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
