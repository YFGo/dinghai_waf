// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.2
// source: api/user/v1/wafUser.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWafUserCreateWafUser = "/api.user.v1.WafUser/CreateWafUser"
const OperationWafUserDeleteWafUser = "/api.user.v1.WafUser/DeleteWafUser"
const OperationWafUserGetWafUser = "/api.user.v1.WafUser/GetWafUser"
const OperationWafUserLogin = "/api.user.v1.WafUser/Login"
const OperationWafUserUpdatePassword = "/api.user.v1.WafUser/UpdatePassword"
const OperationWafUserUpdateWafUser = "/api.user.v1.WafUser/UpdateWafUser"

type WafUserHTTPServer interface {
	CreateWafUser(context.Context, *CreateWafUserRequest) (*CreateWafUserReply, error)
	DeleteWafUser(context.Context, *DeleteWafUserRequest) (*DeleteWafUserReply, error)
	GetWafUser(context.Context, *GetWafUserRequest) (*GetWafUserReply, error)
	Login(context.Context, *LoginUserInfoRequest) (*LoginUserInfoReply, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordReply, error)
	UpdateWafUser(context.Context, *UpdateWafUserRequest) (*UpdateWafUserReply, error)
}

func RegisterWafUserHTTPServer(s *http.Server, srv WafUserHTTPServer) {
	r := s.Route("/")
	r.POST("/app/user/v1/wafUser", _WafUser_CreateWafUser0_HTTP_Handler(srv))
	r.PATCH("/app/user/v1/wafUser", _WafUser_UpdateWafUser0_HTTP_Handler(srv))
	r.DELETE("/app/user/v1/wafUser", _WafUser_DeleteWafUser0_HTTP_Handler(srv))
	r.GET("/app/user/v1/wafUser/{id}", _WafUser_GetWafUser0_HTTP_Handler(srv))
	r.POST("/app/user/v1/wafUser/login", _WafUser_Login0_HTTP_Handler(srv))
	r.PATCH("/app/user/v1/wafUser/password", _WafUser_UpdatePassword0_HTTP_Handler(srv))
}

func _WafUser_CreateWafUser0_HTTP_Handler(srv WafUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWafUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafUserCreateWafUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWafUser(ctx, req.(*CreateWafUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWafUserReply)
		return ctx.Result(200, reply)
	}
}

func _WafUser_UpdateWafUser0_HTTP_Handler(srv WafUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWafUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafUserUpdateWafUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWafUser(ctx, req.(*UpdateWafUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWafUserReply)
		return ctx.Result(200, reply)
	}
}

func _WafUser_DeleteWafUser0_HTTP_Handler(srv WafUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWafUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafUserDeleteWafUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteWafUser(ctx, req.(*DeleteWafUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWafUserReply)
		return ctx.Result(200, reply)
	}
}

func _WafUser_GetWafUser0_HTTP_Handler(srv WafUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWafUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafUserGetWafUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWafUser(ctx, req.(*GetWafUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWafUserReply)
		return ctx.Result(200, reply)
	}
}

func _WafUser_Login0_HTTP_Handler(srv WafUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginUserInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _WafUser_UpdatePassword0_HTTP_Handler(srv WafUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWafUserUpdatePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePassword(ctx, req.(*UpdatePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePasswordReply)
		return ctx.Result(200, reply)
	}
}

type WafUserHTTPClient interface {
	CreateWafUser(ctx context.Context, req *CreateWafUserRequest, opts ...http.CallOption) (rsp *CreateWafUserReply, err error)
	DeleteWafUser(ctx context.Context, req *DeleteWafUserRequest, opts ...http.CallOption) (rsp *DeleteWafUserReply, err error)
	GetWafUser(ctx context.Context, req *GetWafUserRequest, opts ...http.CallOption) (rsp *GetWafUserReply, err error)
	Login(ctx context.Context, req *LoginUserInfoRequest, opts ...http.CallOption) (rsp *LoginUserInfoReply, err error)
	UpdatePassword(ctx context.Context, req *UpdatePasswordRequest, opts ...http.CallOption) (rsp *UpdatePasswordReply, err error)
	UpdateWafUser(ctx context.Context, req *UpdateWafUserRequest, opts ...http.CallOption) (rsp *UpdateWafUserReply, err error)
}

type WafUserHTTPClientImpl struct {
	cc *http.Client
}

func NewWafUserHTTPClient(client *http.Client) WafUserHTTPClient {
	return &WafUserHTTPClientImpl{client}
}

func (c *WafUserHTTPClientImpl) CreateWafUser(ctx context.Context, in *CreateWafUserRequest, opts ...http.CallOption) (*CreateWafUserReply, error) {
	var out CreateWafUserReply
	pattern := "/app/user/v1/wafUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWafUserCreateWafUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WafUserHTTPClientImpl) DeleteWafUser(ctx context.Context, in *DeleteWafUserRequest, opts ...http.CallOption) (*DeleteWafUserReply, error) {
	var out DeleteWafUserReply
	pattern := "/app/user/v1/wafUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWafUserDeleteWafUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WafUserHTTPClientImpl) GetWafUser(ctx context.Context, in *GetWafUserRequest, opts ...http.CallOption) (*GetWafUserReply, error) {
	var out GetWafUserReply
	pattern := "/app/user/v1/wafUser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWafUserGetWafUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WafUserHTTPClientImpl) Login(ctx context.Context, in *LoginUserInfoRequest, opts ...http.CallOption) (*LoginUserInfoReply, error) {
	var out LoginUserInfoReply
	pattern := "/app/user/v1/wafUser/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWafUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WafUserHTTPClientImpl) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...http.CallOption) (*UpdatePasswordReply, error) {
	var out UpdatePasswordReply
	pattern := "/app/user/v1/wafUser/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWafUserUpdatePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WafUserHTTPClientImpl) UpdateWafUser(ctx context.Context, in *UpdateWafUserRequest, opts ...http.CallOption) (*UpdateWafUserReply, error) {
	var out UpdateWafUserReply
	pattern := "/app/user/v1/wafUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWafUserUpdateWafUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
