// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/user/v1/wafUser.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WafUser_CreateWafUser_FullMethodName  = "/api.user.v1.WafUser/CreateWafUser"
	WafUser_UpdateWafUser_FullMethodName  = "/api.user.v1.WafUser/UpdateWafUser"
	WafUser_DeleteWafUser_FullMethodName  = "/api.user.v1.WafUser/DeleteWafUser"
	WafUser_GetWafUser_FullMethodName     = "/api.user.v1.WafUser/GetWafUser"
	WafUser_Login_FullMethodName          = "/api.user.v1.WafUser/Login"
	WafUser_UpdatePassword_FullMethodName = "/api.user.v1.WafUser/UpdatePassword"
)

// WafUserClient is the client API for WafUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WafUserClient interface {
	CreateWafUser(ctx context.Context, in *CreateWafUserRequest, opts ...grpc.CallOption) (*CreateWafUserReply, error)
	UpdateWafUser(ctx context.Context, in *UpdateWafUserRequest, opts ...grpc.CallOption) (*UpdateWafUserReply, error)
	DeleteWafUser(ctx context.Context, in *DeleteWafUserRequest, opts ...grpc.CallOption) (*DeleteWafUserReply, error)
	GetWafUser(ctx context.Context, in *GetWafUserRequest, opts ...grpc.CallOption) (*GetWafUserReply, error)
	Login(ctx context.Context, in *LoginUserInfoRequest, opts ...grpc.CallOption) (*LoginUserInfoReply, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordReply, error)
}

type wafUserClient struct {
	cc grpc.ClientConnInterface
}

func NewWafUserClient(cc grpc.ClientConnInterface) WafUserClient {
	return &wafUserClient{cc}
}

func (c *wafUserClient) CreateWafUser(ctx context.Context, in *CreateWafUserRequest, opts ...grpc.CallOption) (*CreateWafUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWafUserReply)
	err := c.cc.Invoke(ctx, WafUser_CreateWafUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafUserClient) UpdateWafUser(ctx context.Context, in *UpdateWafUserRequest, opts ...grpc.CallOption) (*UpdateWafUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWafUserReply)
	err := c.cc.Invoke(ctx, WafUser_UpdateWafUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafUserClient) DeleteWafUser(ctx context.Context, in *DeleteWafUserRequest, opts ...grpc.CallOption) (*DeleteWafUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWafUserReply)
	err := c.cc.Invoke(ctx, WafUser_DeleteWafUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafUserClient) GetWafUser(ctx context.Context, in *GetWafUserRequest, opts ...grpc.CallOption) (*GetWafUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWafUserReply)
	err := c.cc.Invoke(ctx, WafUser_GetWafUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafUserClient) Login(ctx context.Context, in *LoginUserInfoRequest, opts ...grpc.CallOption) (*LoginUserInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserInfoReply)
	err := c.cc.Invoke(ctx, WafUser_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wafUserClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordReply)
	err := c.cc.Invoke(ctx, WafUser_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WafUserServer is the server API for WafUser service.
// All implementations must embed UnimplementedWafUserServer
// for forward compatibility.
type WafUserServer interface {
	CreateWafUser(context.Context, *CreateWafUserRequest) (*CreateWafUserReply, error)
	UpdateWafUser(context.Context, *UpdateWafUserRequest) (*UpdateWafUserReply, error)
	DeleteWafUser(context.Context, *DeleteWafUserRequest) (*DeleteWafUserReply, error)
	GetWafUser(context.Context, *GetWafUserRequest) (*GetWafUserReply, error)
	Login(context.Context, *LoginUserInfoRequest) (*LoginUserInfoReply, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordReply, error)
	mustEmbedUnimplementedWafUserServer()
}

// UnimplementedWafUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWafUserServer struct{}

func (UnimplementedWafUserServer) CreateWafUser(context.Context, *CreateWafUserRequest) (*CreateWafUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWafUser not implemented")
}
func (UnimplementedWafUserServer) UpdateWafUser(context.Context, *UpdateWafUserRequest) (*UpdateWafUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWafUser not implemented")
}
func (UnimplementedWafUserServer) DeleteWafUser(context.Context, *DeleteWafUserRequest) (*DeleteWafUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWafUser not implemented")
}
func (UnimplementedWafUserServer) GetWafUser(context.Context, *GetWafUserRequest) (*GetWafUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWafUser not implemented")
}
func (UnimplementedWafUserServer) Login(context.Context, *LoginUserInfoRequest) (*LoginUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWafUserServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedWafUserServer) mustEmbedUnimplementedWafUserServer() {}
func (UnimplementedWafUserServer) testEmbeddedByValue()                 {}

// UnsafeWafUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WafUserServer will
// result in compilation errors.
type UnsafeWafUserServer interface {
	mustEmbedUnimplementedWafUserServer()
}

func RegisterWafUserServer(s grpc.ServiceRegistrar, srv WafUserServer) {
	// If the following call pancis, it indicates UnimplementedWafUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WafUser_ServiceDesc, srv)
}

func _WafUser_CreateWafUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWafUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafUserServer).CreateWafUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafUser_CreateWafUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafUserServer).CreateWafUser(ctx, req.(*CreateWafUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafUser_UpdateWafUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWafUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafUserServer).UpdateWafUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafUser_UpdateWafUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafUserServer).UpdateWafUser(ctx, req.(*UpdateWafUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafUser_DeleteWafUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWafUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafUserServer).DeleteWafUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafUser_DeleteWafUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafUserServer).DeleteWafUser(ctx, req.(*DeleteWafUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafUser_GetWafUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWafUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafUserServer).GetWafUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafUser_GetWafUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafUserServer).GetWafUser(ctx, req.(*GetWafUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafUser_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafUserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafUser_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafUserServer).Login(ctx, req.(*LoginUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WafUser_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WafUserServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WafUser_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WafUserServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WafUser_ServiceDesc is the grpc.ServiceDesc for WafUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WafUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.WafUser",
	HandlerType: (*WafUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWafUser",
			Handler:    _WafUser_CreateWafUser_Handler,
		},
		{
			MethodName: "UpdateWafUser",
			Handler:    _WafUser_UpdateWafUser_Handler,
		},
		{
			MethodName: "DeleteWafUser",
			Handler:    _WafUser_DeleteWafUser_Handler,
		},
		{
			MethodName: "GetWafUser",
			Handler:    _WafUser_GetWafUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WafUser_Login_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _WafUser_UpdatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/wafUser.proto",
}
